/*Thiết kế thiết bị cho cá ăn tự động với các chức năng sau (BT1, BT2, BT3 là các phím chức năng để hẹn giờ
Thiết lập giờ, phút, chế độ trên LCD/glcd (tùy chọn một trong 2
Khi đến giờ cho cá ăn, thì động cơ sẽ quay trong vòng ls và servo sẽ mờ góc từ 0 đến 90.
bấm công tắc 1, đèn xanh đỏ sẽ nhấp nháy theo chu kỳ Is và động cơ servo và động cơ đc sẽ ngừng ngay lập tức/*
#include <io.h>
//hardware là file riêng, chứa các khai biến hardware mình sẽ tương tác vs
#include <hardware.c>
#include <glcd.h>
#include <delay.h>
#include <ds1307.h>
#include <stdlib.h>
#define servo_1 PORTC.7

int counter = 0;
int dem = -1;
int vi_tri = 100;
unsigned char hour, minute, second;	//khai báo cho giờ, phút, giây mình sẽ dùng để hiện thị thời gian thực
char tmp[10];
int hour_1, hour_2, min_1, min_2;
int time_set[4] = {-1, -1, -1, -1}; 	//array chứa các hàng chục/đơn vị của giờ rồi đến phút (của thời gian đặt)
bool eat_much = false;
bool den = false;


// Timer1 overflow interrupt service routine (delay 0.1 ms)
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
    // Reinitialize Timer1 value
    TCNT1H=0xFCE0 >> 8;
    TCNT1L=0xFCE0 & 0xff;
    // Place your code here
    
    // servo
    dem++;
    if(dem >= 200) 
        dem = 0;
    if (dem < vi_tri) 
        servo_1 = 1;
    else 
        servo_1 = 0;
    
    //khi bấm nút 1, kích hoạt đèn led và dừng động cơ (chắc đây là chức năng cancel)
    if (OCR0 != 0xff && PINB.2 == 0) {
        den = true;
        dung_DC();
    }
            
    // den
    if (den) {
        if (counter == 20000)
            counter  = 0;
            
        if (counter == 0) {
            PORTD.4 = 0;
            PORTD.5 = 1;
        }
            
        if (counter == 10000) {
            PORTD.5 = 0;
            PORTD.4 = 1;
        }
        counter++;
    }
}
//cập nhật real time trên màn hình lcd, lấy thời gian từ rtc, rồi sd các biến đã đặt để hiện thị trên lcd
void update_time() {
    // Place your code here
      rtc_get_time(&hour,&minute,&second);
      hour_1 = hour / 10;
      hour_2 = hour % 10;;
      min_1 = minute / 10;
      min_2 = minute % 10;
      lcd_gotoxy(0, 0);
      lcd_putchar(hour_1 + 48);
      lcd_putchar(hour_2 + 48);
      lcd_putchar(':') ;
      lcd_putchar(min_1 + 48);
      lcd_putchar(min_2 + 48);
      lcd_putchar(':') ;
      lcd_putchar((second/10) + 48);
      lcd_putchar((second%10) + 48);
}

void hen_gio() {
    int i = 0, input;
    glcd_clear();
    while (i != 4) {  //vòng lặp để đặt h trong mảng set_time (có mỗi 4 ptử thôi)
        input = read();		//read là ma trận bàn phím trong hardware.c, input = read() là lấy nhập từ bàn phím  
        if (input != -1) {
            if (i == 0 && (input >= 0 && input <= 2)) //đặt cho hàng chục của giờ 
                time_set[i] = input;
            else if (i == 1 && ((time_set[0] == 2 && input >= 0 && input <= 3) ||  time_set[0] != 2)) //đặt cho hàng đơn vị (không có 4 bởi 24:00 chuyển sang 00:00 luôn)
                time_set[i] = input;
            else if ((i == 2 && (input >= 0 && input <= 5)) || i == 3) //đặt cho hàng chục/đơn vị của phút (ko có 60 phút bởi chuyển sang giờ sau luôn)
                time_set[i] = input;
                 
            itoa(time_set[i], tmp);
            glcd_outtextxy(25 + 7 * i, 20, tmp);
            i++;
        }
        delay_ms(250);
    }

    //hiển thị chế độ ăn
    glcd_clear();
    glcd_outtextxy(15, 10, "AN NHIEU?");
    glcd_outtextxy(15, 20, "BT1 - CO");
    glcd_outtextxy(15, 30, "BT2 - KO");
	
    //nút 1 thì ăn nhiều, nút 2 thì không
    while (i != -1) {
        if (PINB.2 == 0) {
            eat_much = true;
            i = -1;
        }
        if (PINB.3 == 0) {
            eat_much = false;
            i = -1;
        }
    }

    //hiển thị đặt thành công
    glcd_clear();
    glcd_outtextxy(15, 20, "SUCCESS!");
    delay_ms(1000);
    glcd_clear();
}

void main(void)
{
    //init GLCD
    init_glcd(4, 66);
    init_lcd();
    init_register();     
    init_timer();
     
    i2c_init(); 
    //rtc_init(3,1,0);
    rtc_init(0,0,0); 
    //rtc_set_time(0,0,0); 
    #asm("sei")
    
    while (1)
    {           
        
	//update
        update_time();
        // Please write your application code here
        glcd_outtextxy(25, 15, "HEN GIO");
        glcd_outtextxy(30, 25, "BT1");
 	//hẹn thời gian
        if (PINB.2 == 0) {
            hen_gio();
        }
        //khi thời gian thực chạm đến thời gian hẹn
        if (hour_1 == time_set[0] && hour_2 == time_set[1] && min_1 == time_set[2] && min_2 == time_set[3] && second == 0) {
            quay_DC();
            // servo 90 do
            vi_tri = 15;
            if (eat_much)
                delay_ms(2000);
            else
                delay_ms(1000);
            dung_DC();
            vi_tri = 10;         
        }
            
        delay_ms(100);
        
    }
